The plugin adds support for uploading files to Amazon S3, by adding a s3upload(...) method to *File* and *InputStream* classes, so you'll just need to call this method passing a closure with overridden config options, but if you do not want to override it, just leave this and the plugin will catch from the Config.groovy default options. 

h3. Simple File upload from a File object

{code}
def s3file = new File("/tmp/test.txt").s3upload {
    path "folder/to/my/file/"
}
{code}

This way your test.txt file will be uploaded to 

{code}
<default-bucket>.s3.amazonaws.com/folder/to/my/file/test.txt
{code}

If you want to override config during the file upload, check this guide next section.

h3. Uploading files directly from its InputStream

This is useful when you don't have the file stored in your filesystem. When user uploads files to your application using a *multipart/form-data* form, you can upload it directly to s3. Imagine it have an upload form like this:

{code}
<g:uploadForm action="uploadFromInputStream">
    <input type="file" name="photo">
    <input type="submit" value="upload">
</g:uploadForm>
{code}

you could have your *uploadFromInputStream* action implemented this way:

{code}
def file = request.getFile('photo')
def uploadedFile = file.inputStream.s3upload(file.originalFilename) {
    bucket "file-upload-from-inputstream"
}
{code}

{warning}
Uploading from InputStream requires one extra parameters, the filename that this object will have in S3, usually the 'originalFileName'.
{warning}

Note that when you use *File*.s3upload you just pass the closure that configures it. When using from one inputStream, you *SHOULD* have to specify the name that file will have and the file size. The above example show exactly how to do it with the correct info from the uploaded file.